import pprint
import pprint
from aiogram import Dispatcher

from delete_dot import delete_dot
from google_cal import GoogleCalendar
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ContentType, \
    ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, Contact
from keyboards_cal import cal_kb, create_day_table, kb_creat_event
from db_config import add_new_procedura, find_procedura, delete_procedura
from keyboards import kb_mainmenu, kb_stop
from loader import dp, bot
from text_welcome import text_welcome
from text_obomne import text_obomne
from keyboards import kb_mainmenu, kb_back_to_uslugi, sert_kb
from text_uslugi import text_uslugi
from db_config import cursor, find_idproceduri, find_procedura, connect, add_new_klient, update_klient, find_name_procedure
from fsm import  NewItem, CalendarBt
from aiogram.dispatcher import  FSMContext
from klients import Klients
from master_id import master_id
from keyboards import contact_keyboard
from aiogram import types
from digits import  digits
from sertificat_list import sertificat_list


#–ü–£–ù–ö–¢ –ú–ï–ù–Æ –û–ë–û –ú–ù–ï
@dp.callback_query_handler(text='obomne')
async def obomne(cb: CallbackQuery):
    await cb.answer('üëå')
    id = cb.from_user.id
    await bot.send_message(chat_id=id, text= text_obomne, reply_markup= sert_kb)
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)

#–ü–£–ù–ö–¢ –ú–ï–ù–Æ –£–°–õ–£–ì–ò
@dp.callback_query_handler(text='uslugi')
async def uslugi(cb: CallbackQuery):
    await cb.answer('üëå')
    cursor.execute('SELECT * FROM proceduri')
    list_button_uslugi = []
    for uslugi_bt in cursor.fetchall():
        list_button_uslugi.append([InlineKeyboardButton(text=str(uslugi_bt[1]), callback_data=str(uslugi_bt[4]))])
    kb_uslugi = InlineKeyboardMarkup(inline_keyboard=list_button_uslugi)
    id = cb.from_user.id
    await bot.send_message(chat_id=id, text=text_uslugi, reply_markup=kb_uslugi)
    await bot.delete_message(chat_id=cb.from_user.id,message_id=cb.message.message_id)





#–ü–£–ù–ö–¢ –ú–ï–ù–Æ –£–°–õ–£–ì–ò
@dp.callback_query_handler(text='back_uslugi')
async def back_uslugi(cb: CallbackQuery):
    await cb.answer('üëå')
    cursor.execute('SELECT * FROM proceduri')
    list_button_uslugi = []
    for uslugi_bt in cursor.fetchall():
        list_button_uslugi.append([InlineKeyboardButton(text=str(uslugi_bt[1]), callback_data=str(uslugi_bt[4]))])
    kb_uslugi = InlineKeyboardMarkup(inline_keyboard=list_button_uslugi)
    id = cb.from_user.id
    await bot.send_message(chat_id=id, text=text_uslugi, reply_markup=kb_uslugi)
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)


@dp.callback_query_handler(text='zapis', state=None)
async def zapros_phone(cb: CallbackQuery):
    await bot.send_message(chat_id=cb.from_user.id, text='–î–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ '
                                                         '—Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è.',
                           reply_markup=await contact_keyboard())
    await cb.answer('üëå')
    await NewItem.phone.set()
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)

@dp.message_handler(state=NewItem.phone, content_types=types.ContentType.CONTACT)
async def phone_catch(message: Message, state: FSMContext):
    contact = message.contact

    await state.update_data({'phone':contact})
    data = await state.get_data()
    new_data = (contact.phone_number, message.from_user.id)
    update_klient(new_data, 'phone')
    connect.commit()
    if find_name_procedure((message.from_user.id,)) != []:
        name_procedura = find_name_procedure((message.from_user.id,))[0][0]
        new_data1 = (name_procedura, message.from_user.id)
        update_klient(new_data1, 'procedure')
        connect.commit()
    await message.answer('–Ø —Ä–∞–±–æ—Ç–∞—é –ø–æ –±—É–¥–Ω—è–º —Å 15:30 –¥–æ 21:00, —Å–± - –≤—Å —Å 11:00 –¥–æ 19:00. –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',reply_markup=ReplyKeyboardRemove())
    await NewItem.date.set()



@dp.message_handler(state=NewItem.date)
async def phone_catch(message: Message, state: FSMContext):
    await state.update_data({'date':delete_dot(message.text)})
    data = await state.get_data()
    name_procedura = find_name_procedure((message.from_user.id,))
    if name_procedura != []:
        name_proc = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' if name_procedura[0][0] == None else name_procedura[0][0]
    else:
        name_proc = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    us_name = '–ù–µ—Ç' if message.from_user.username == None else f'@{message.from_user.username}'
    vizitka = await state.get_data('phone')
    await message.answer(text='–ï—Å–ª–∏ —ç—Ç–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω—ã, –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–ª–µ–π –∑–∞–ø–∏—Å–∏.')
    await bot.send_contact(chat_id=master_id, first_name=vizitka.get('phone').first_name, vcard=vizitka.get('phone').vcard, phone_number=vizitka.get('phone').phone_number)
    await bot.send_message(chat_id=master_id, text=f'–ö–ª–∏–µ–Ω—Ç {message.from_user.full_name} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è '
                                                   f'–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:\n{name_proc}.\n\n–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:'
                                                   f'\n{data.get("date")}. \n\nusername: {us_name}.\n'
                                                   f'\n–¢–µ–ª–µ—Ñ–æ–Ω: +{vizitka.get("phone").phone_number}.\n\n id –∫–ª–∏–µ–Ω—Ç–∞: {message.from_user.id}', reply_markup=kb_creat_event)
    await state.finish()


@dp.callback_query_handler(text='event_no')
async def otkaz(cb: CallbackQuery):
    await cb.answer('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!!!')
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)
    info = cursor.execute('SELECT * FROM klients WHERE status_recording="in_work"').fetchall()
    new_data = ('otmena', digits(cb.message.text.split('.')[4]))
    update_klient(new_data, 'status_recording')
    connect.commit()


@dp.callback_query_handler(text='event_yes', state=None)
async def calendar(cb: CallbackQuery):
    if cb.data == 'event_yes':
        await cb.answer('üëå')
        await bot.send_message(chat_id=cb.from_user.id, text='–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:', reply_markup=cal_kb)
        await CalendarBt.month.set()
        await bot.edit_message_reply_markup(chat_id=cb.from_user.id, message_id=cb.message.message_id,
                                            reply_markup=None)
        print(digits(cb.message.text.split('.')[4]))
        new_data = ('in_work', digits(cb.message.text.split('.')[4]))
        update_klient(new_data, 'status_recording')
        connect.commit()



@dp.callback_query_handler(state=CalendarBt.month)
async def calendar_month(cb: CallbackQuery, state: FSMContext):
    await state.update_data({'month': cb.data})
    await cb.answer('üëå')
    data = await state.get_data()
    print(data.get('month'))
    days_bt_text = create_day_table(int(data.get('month').split('-')[1]))
    days_kb = InlineKeyboardMarkup(row_width=7, inline_keyboard=days_bt_text)
    await bot.send_message(chat_id=cb.from_user.id, text=f'–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {data.get("month").split("-")[1]}-{data.get("month").split("-")[0]}'
                                                         f'\n–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ:', reply_markup=days_kb)
    await CalendarBt.day.set()
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)


@dp.callback_query_handler(state=CalendarBt.day)
async def calendar_month(cb: CallbackQuery, state: FSMContext):
    await state.update_data({'day': cb.data})
    await cb.answer('üëå')
    data = await state.get_data()
    print(data.get('day'))
    await bot.send_message(chat_id=cb.from_user.id, text=f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {data.get("day")}-{data.get("month").split("-")[1]}-{data.get("month").split("-")[0]}'
                                                         f'\n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è:')
    await CalendarBt.time.set()
    await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)


@dp.message_handler(state=CalendarBt.time)
async def calendar_month(message: Message, state: FSMContext):
    content = str(message.text)

    if len(content) == 5 and content[2] == ':' and content.split(':')[0].isdigit() and 0 <= int(content.split(':')[0]) <=23 and content.split(':')[1].isdigit() and 0 <= int(content.split(':')[1]) <=59:

        await state.update_data({'time': message.text})
        data = await state.get_data()
        print(data.get('time'))
        await message.answer(text=f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {data.get("day")}-{data.get("month").split("-")[1]}-{data.get("month").split("-")[0]}\n–í—Ä–µ–º—è: {data.get("time")}\n–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å?',
                             reply_markup=kb_creat_event)
        await CalendarBt.final.set()
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º!')

#Dobavlenie zapisi v calendar
@dp.callback_query_handler(state=CalendarBt.final)
async def calendar_month(cb: CallbackQuery, state: FSMContext):
    await state.update_data({'final': cb.data})
    data = await state.get_data()
    print(data.get('final'))
    if data.get('final') == 'event_no':
        await bot.send_message(chat_id=cb.from_user.id, text='–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!!!')
        await state.finish()
        await cb.answer('üëå')
        info = cursor.execute('SELECT * FROM klients WHERE status_recording="in_work"').fetchall()
        new_data = ('otmena', info[0][0])
        update_klient(new_data, 'status_recording')
        connect.commit()
    else:
        try:

            info = cursor.execute('SELECT * FROM klients WHERE status_recording="in_work"').fetchall()
            first_name = info[0][1]
            last_name = info[0][2] if info[0][2] != None else ''
            procedura = info[0][4] if info[0][4] != None else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
            tg_id = info[0][3] if info[0][3] != None else '–Ω–µ—Ç'
            summary = f'{first_name} {last_name}'
            description = f'–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedura}\n\nTG_id: {tg_id}\n\n–¢–µ–ª–µ—Ñ–æ–Ω: ' \
                          f'+{info[0][8]}'f'\n\nid –∫–ª–∏–µ–Ω—Ç–∞: {info[0][0]}'
            dateTime_start = f'{data.get("month")}-{data.get("day")}T{data.get("time")}:00+03:00'
            dateTime_end = f'{data.get("month")}-{data.get("day")}T{data.get("time")}:00+03:00'

            obj = GoogleCalendar()

            calendar_id = '1dbae5a038d3414d565f0e8ba342c1fa018ceb2d3d5bd0245ec6f610b978a446@group.calendar.google.com'

            event = {
                'summary': summary,
                'location': 'RAI BEAUTY SPACE',
                'description': description,
                'start': {
                    'dateTime': dateTime_start,
                },
                'end': {
                    'dateTime': dateTime_end,
                }
            }
            event = obj.add_event(calendar_id=calendar_id, body=event)
            print(event.get('id'))

            await bot.edit_message_reply_markup(chat_id=cb.from_user.id, message_id=cb.message.message_id, reply_markup=None)
            await bot.edit_message_text(chat_id=cb.from_user.id, message_id=cb.message.message_id,
                                                text=f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {data.get("day")}-{data.get("month").split("-")[1]}-{data.get("month").split("-")[0]}'
                                                     f'\n–í—Ä–µ–º—è: {data.get("time")}\n–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!')

            await bot.send_message(chat_id=cb.from_user.id, text=f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {data.get("day")}-{data.get("month").split("-")[1]}'
                                                                 f'-{data.get("month").split("-")[0]}\nüïí: {data.get("time")}\n'
                                                                 f'–ù–∞—à –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å! ')
            new_data = ('active', info[0][0])
            update_klient(new_data, 'status_recording')
            connect.commit()


            await state.finish()
            await cb.answer('üëå')
        except:
            await cb.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!!!')



@dp.callback_query_handler(text='back_to_main_menu')
async def info(cb: CallbackQuery):
    await bot.edit_message_text(text='-------------–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ-------------', chat_id=cb.from_user.id, message_id=cb.message.message_id, reply_markup=kb_mainmenu)

@dp.callback_query_handler(text='view_sertificates')
async def view_sertificate(cb: CallbackQuery):
    for i in range(len(sertificat_list)):
        path = f'sertificat_file/sert_{i+1}.jpg'
        file = InputFile(path)
        if i == len(sertificat_list)-1:
            await bot.send_photo(chat_id=cb.from_user.id, photo=file, reply_markup=kb_mainmenu)
        else:
            await bot.send_photo(chat_id=cb.from_user.id, photo=file)



@dp.callback_query_handler(text='raboti')
async def raboti(cb: CallbackQuery):
    await cb.answer('...–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')


@dp.callback_query_handler(text='otzivi')
async def otzivi(cb: CallbackQuery):
    await cb.answer('...–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')


@dp.callback_query_handler(text='kontakti')
async def kontakti(cb: CallbackQuery):
    await cb.answer('...–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')





@dp.callback_query_handler()
async def print_commands(cb: CallbackQuery):
    command = cb.data
    if command.split('_')[0] == 'ukol':
        proceduri_id = find_idproceduri((command,))[0][0]
        descr = f'{find_procedura((proceduri_id,))[0][5]}\n\nüïí {find_procedura((proceduri_id,))[0][2]}\n\nüí∞ {find_procedura((proceduri_id,))[0][3]}'
        photo = InputFile(f'foto_proceduri/{proceduri_id}.jpg')

        await bot.send_photo(chat_id=cb.message.chat.id, photo=photo, caption=descr, reply_markup=kb_back_to_uslugi)
        await cb.answer('üëå')
        procedure = (find_procedura((proceduri_id,))[0][1])
        new_data = (procedure, cb.from_user.id)
        update_klient(new_data, 'last_procedure')
        connect.commit()
        await bot.delete_message(chat_id=cb.from_user.id, message_id=cb.message.message_id)

'''async def contact_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    first_button = KeyboardButton(text=("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), request_contact=True)
    markup.add(first_button)
    return markup


# handlers.py
@dp.message_handler(commands=("contact"))
async def share_number(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=await contact_keyboard())

@dp.message_handler(content_types=ContentType.CONTACT)
async def get_contact(message: Message):
    contact = message.contact
    await bot.send_contact(chat_id=master_id, vcard=contact, phone_number=contact.phone_number, first_name=contact.first_name)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {contact.full_name}.\n"
                         f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω",
                         reply_markup=ReplyKeyboardRemove())
'''









